// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`WebhookRouterForm should render 1`] = `
<Flipper
  back={
    <Dialog
      buttons={
        Object {
          "primary": Object {
            "name": "Ok",
            "onClick": [Function],
          },
          "secondary": Object {
            "name": "Cancel",
            "onClick": [Function],
          },
        }
      }
      headerClass="call_webhook"
      headerIcon="fe-cog"
      headerStyle="barber"
      subtitle="Advanced Settings"
      title="Call Webhook"
    >
      <h4
        className="headers_title"
      >
        Headers
      </h4>
      <p
        className="info"
      >
        Add any additional headers below that you would like to send along with your request.
      </p>
      <FlipMovePropConverter
        delay={0}
        disableAllAnimations={false}
        duration={100}
        easing="ease-out"
        enterAnimation="elevator"
        getPosition={[Function]}
        leaveAnimation="elevator"
        maintainContainerHeight={false}
        staggerDelayBy={0}
        staggerDurationBy={0}
        typeName="div"
        verticalAlignment="top"
      >
        <div>
          <HeaderElement
            entry={
              Object {
                "value": Object {
                  "name": "",
                  "uuid": "b1f332f3-bdd3-4891-aec5-1843a712dbf1",
                  "value": "",
                },
              }
            }
            index={0}
            onChange={[Function]}
            onRemove={[Function]}
          />
        </div>
      </FlipMovePropConverter>
    </Dialog>
  }
  front={
    <Dialog
      buttons={
        Object {
          "primary": Object {
            "name": "Ok",
            "onClick": [Function],
          },
          "secondary": Object {
            "name": "Cancel",
            "onClick": [Function],
          },
        }
      }
      headerClass="call_webhook"
      title="Call Webhook"
    >
      <TypeList
        __className=""
        initialType={
          Object {
            "aliases": Array [
              "split_by_webhook",
            ],
            "component": [Function],
            "description": "Call a webook",
            "form": undefined,
            "localization": [Function],
            "localizeableKeys": Array [
              "exits",
            ],
            "name": "Call Webhook",
            "type": "call_webhook",
          }
        }
        onChange={[MockFunction]}
      />
      <div
        className="method"
      >
        <SelectElement
          entry={
            Object {
              "value": Object {
                "label": "GET",
                "value": "GET",
              },
            }
          }
          name="MethodMap"
          onChange={[Function]}
          options={
            Array [
              Object {
                "label": "GET",
                "value": "GET",
              },
              Object {
                "label": "POST",
                "value": "POST",
              },
              Object {
                "label": "PUT",
                "value": "PUT",
              },
            ]
          }
        />
      </div>
      <div
        className="url"
      >
        <TextInputElement
          autocomplete={true}
          entry={
            Object {
              "value": "",
            }
          }
          name="URL"
          onChange={[Function]}
          placeholder="Enter a URL"
        />
      </div>
      <div
        className="instructions"
      >
        <p>
          <React.Fragment>
            If you need to, you can also
             
            <span
              className="link"
              onClick={[Function]}
            >
              configure the headers
            </span>
             
            of your request.
             
          </React.Fragment>
          If your server responds with JSON, each property will be added to the Flow.
        </p>
        <pre
          className="code"
        >
          { "product": "Solar Charging Kit", "stock level": 32 }
        </pre>
        <p>
          In this example
           
          <span
            className="example"
          >
            @webhook.json.product
          </span>
           and
           
          <span
            className="example"
          >
            @webhook.json["stock level"]
          </span>
           
          would be available in all future steps.
        </p>
      </div>
    </Dialog>
  }
/>
`;

exports[`WebhookRouterForm updates should repopulate post body 1`] = `
Object {
  "headers": Array [
    Object {
      "value": Object {
        "name": "",
        "uuid": "e67ce051-f3e4-4c42-807b-e393df5fa382",
        "value": "",
      },
    },
  ],
  "method": Object {
    "value": Object {
      "value": "GET",
    },
  },
  "postBody": Object {
    "value": null,
  },
  "url": Object {
    "value": "http://domain.com/",
  },
  "valid": true,
}
`;

exports[`WebhookRouterForm updates should repopulate post body 2`] = `
Object {
  "headers": Array [
    Object {
      "value": Object {
        "name": "",
        "uuid": "e67ce051-f3e4-4c42-807b-e393df5fa382",
        "value": "",
      },
    },
  ],
  "method": Object {
    "value": "POST",
  },
  "postBody": Object {
    "value": "{
    \\"flow\\": @(json(run.flow)),
    \\"path\\": @(json(run.path)),
    \\"results\\": @(json(run.results)),
    \\"input\\": @(json(run.input)),
    \\"channel\\": @(json(run.input.channel))
    \\"contact\\": @(json(contact))
}",
  },
  "url": Object {
    "value": "http://domain.com/",
  },
  "valid": true,
}
`;

exports[`WebhookRouterForm updates should save changes: after flipped 1`] = `
Object {
  "flipped": true,
}
`;

exports[`WebhookRouterForm updates should save changes: after header removed 1`] = `
Object {
  "headers": Array [
    Object {
      "value": Object {
        "name": "",
        "uuid": "061fc171-8b79-4636-b892-bd0ea5aa9b42",
        "value": "",
      },
    },
  ],
  "method": Object {
    "value": Object {
      "value": "POST",
    },
  },
  "postBody": Object {
    "value": "Post Body",
  },
  "url": Object {
    "value": "",
  },
  "valid": true,
}
`;

exports[`WebhookRouterForm updates should save changes: flipped back 1`] = `
Object {
  "flipped": false,
}
`;

exports[`WebhookRouterForm updates should save changes: intitial state 1`] = `
Object {
  "headers": Array [
    Object {
      "value": Object {
        "name": "",
        "uuid": "061fc171-8b79-4636-b892-bd0ea5aa9b42",
        "value": "",
      },
    },
    Object {
      "value": Object {
        "name": "Content-type",
        "uuid": "1dce2b34-9aab-4e20-81c4-3f0408dcb671",
        "value": "application/json",
      },
    },
  ],
  "method": Object {
    "value": Object {
      "value": "POST",
    },
  },
  "postBody": Object {
    "value": "Post Body",
  },
  "url": Object {
    "value": "",
  },
  "valid": true,
}
`;

exports[`WebhookRouterForm updates should save changes: save all the things 1`] = `
Array [
  Object {
    "inboundConnections": Object {},
    "node": Object {
      "actions": Array [
        Object {
          "body": "Post Body",
          "headers": Object {},
          "method": "POST",
          "type": "call_webhook",
          "url": "http://domain.com/",
          "uuid": "763e4844-3e1b-407a-a1b5-5fdfcd308b41",
        },
      ],
      "exits": Array [
        Object {
          "destination_node_uuid": null,
          "name": "Success",
          "uuid": "477ac8b4-25e2-483a-8686-2d1332c4da1c",
        },
        Object {
          "destination_node_uuid": null,
          "name": "Failed",
          "uuid": "1e47a1e1-3c67-4df5-adf1-da542c789adb",
        },
        Object {
          "destination_node_uuid": null,
          "name": "Unreachable",
          "uuid": "132de855-4042-4dc1-a18f-cc2e6a8f790a",
        },
      ],
      "router": Object {
        "cases": Array [
          Object {
            "arguments": Array [
              "success",
            ],
            "exit_uuid": "477ac8b4-25e2-483a-8686-2d1332c4da1c",
            "type": "has_webhook_status",
            "uuid": "2dc85899-0577-4f1b-a620-f12094e34b5e",
          },
          Object {
            "arguments": Array [
              "response_error",
            ],
            "exit_uuid": "1e47a1e1-3c67-4df5-adf1-da542c789adb",
            "type": "has_webhook_status",
            "uuid": "42ebf1d0-a43e-4ba6-9577-c863b20c88c4",
          },
          Object {
            "arguments": Array [
              "connection_error",
            ],
            "exit_uuid": "132de855-4042-4dc1-a18f-cc2e6a8f790a",
            "type": "has_webhook_status",
            "uuid": "70ac6ea6-803a-4c33-81c7-dc26803c313f",
          },
        ],
        "default_exit_uuid": "1e47a1e1-3c67-4df5-adf1-da542c789adb",
        "operand": "@run.webhook",
        "type": "switch",
      },
      "uuid": "c6f278d5-2741-4c0a-880c-52a07dea91a5",
      "wait": null,
    },
    "ui": Object {
      "position": null,
      "type": "split_by_webhook",
    },
  },
]
`;
